// Generated by CoffeeScript 1.3.1
(function() {
  var Templater,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["use!underscore", "use!dust", "use!md5"], function(_, dust, md5) {
    return _.extend(dust.filters, {
      "upper": function(text) {
        return text.toUpperCase();
      },
      "lower": function(text) {
        return text.toLowerCase();
      },
      "md5": md5,
      "date": function(time) {
        var d;
        d = new Date(time);
        return d.getDate() + "." + d.getMonth() + "." + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes();
      }
    });
  });

  ({
    "date": function(time) {
      var d;
      d = new Date(time);
      return d.getDate() + "." + d.getMonth() + "." + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes();
    }
  });

  Templater = (function() {

    Templater.name = 'Templater';

    Templater.prototype.baseContext = null;

    function Templater(app) {
      this.app = app;
      this._parseClassPath = __bind(this._parseClassPath, this);

      this._buildBaseContext = __bind(this._buildBaseContext, this);

      this.render = __bind(this.render, this);

      this.baseContext = this._buildBaseContext();
    }

    Templater.prototype.render = function(tmplPath, context, callback) {
      var _ref,
        _this = this;
      if (_.isFunction(context) && !callback) {
        _ref = [context, {}], callback = _ref[0], context = _ref[1];
      }
      if (dust.cache[tmplPath] != null) {
        return dust.render(tmplPath, this.baseContext.push(context), function(err, output) {
          if (err) {
            console.log(err);
          }
          return callback(output, err);
        });
      } else {
        return require(["text!" + tmplPath], function(tpl) {
          dust.loadSource(dust.compile(tpl, tmplPath));
          return _this.render(tmplPath, context, callback);
        });
      }
    };

    Templater.prototype._buildBaseContext = function() {
      var _this = this;
      return dust.makeBase({
        block: function(chunk, context, bodies, params) {
          var _callback, _uniqId, _viewParams;
          _uniqId = _.uniqueId('wblock_');
          chunk.write("<div id='" + _uniqId + "'></div>");
          if (!params.view) {
            throw new TypeError("Undefined widget name!");
          }
          _viewParams = _this._parseClassPath(params.view);
          _callback = function() {
            return require(_viewParams.deps, function() {
              var view;
              params.el = '#' + _uniqId;
              view = _this.app.view(_viewParams.module.Views[_viewParams.name], params);
              view.name = _uniqId;
              view.setElement('#' + _uniqId);
              return view.render();
            });
          };
          if (params.on) {
            _viewParams.module.off(params.on);
            return _viewParams.module.on(params.on, _callback);
          } else {
            return _.defer(_callback);
          }
        },
        chosen: function(chunk, context, bodies, params) {
          var _callback, _collectParams, _ref, _uniqId;
          _uniqId = _.uniqueId('wchosen_');
          chunk.write("<select id='" + _uniqId + "' name='" + params.name + "' data-placeholder='" + ((_ref = params.placeholder) != null ? _ref : '') + "'></select>");
          _collectParams = _this._parseClassPath(params.collection);
          _callback = function() {
            _collectParams.deps.push("use!chosen");
            return require(_collectParams.deps, function() {
              var collection, _render;
              collection = _this.app.collection(_collectParams.module.Collections[_collectParams.name]);
              _render = function() {
                var _options;
                _options = ['<option/>'];
                collection.each(function(item) {
                  return _options.push("<option value='" + (item.get('id')) + "'>" + (item.get('fullName') || item.get('name')) + "</option>");
                });
                return $('#' + _uniqId).html(_options.join("")).chosen();
              };
              return collection.lazyFetch(_render);
            });
          };
          if (params.on) {
            _collectParams.module.off(params.on);
            return _collectParams.module.on(params.on, _callback);
          } else {
            return _.defer(_callback);
          }
        }
      });
    };

    Templater.prototype._parseClassPath = function(path, callback) {
      var _deps, _matches, _module, _pathes;
      _module = null;
      _matches = path.match(/(\S+)\s*:\s*(\S+)/);
      if (_matches != null) {
        _module = this.app.module(_matches[1]);
        path = _matches[2];
      } else {
        _module = this.app.currentModule();
      }
      _deps = [];
      _pathes = path.match(/^(.+)\/([^\/]+)$/);
      if (_pathes != null) {
        _deps.push(_module.path.replace(/[^\/]+$/, '') + _pathes[1]);
        path = _pathes[2];
      }
      return {
        name: path,
        module: _module,
        deps: _deps
      };
    };

    return Templater;

  })();

  Templater;


}).call(this);
