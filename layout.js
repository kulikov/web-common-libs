// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["use!underscore", "use!backbone"], function(_, Backbone) {
    var Layout, LayoutView;
    Layout = (function() {

      Layout.prototype.id = null;

      Layout.prototype.app = null;

      Layout.prototype.module = null;

      Layout.prototype._configs = null;

      Layout.prototype._layoutView = null;

      function Layout(options) {
        if (options == null) {
          options = {};
        }
        this._configs = {};
        this.id = _.uniqueId('layout_');
        _.extend(this, options);
      }

      Layout.prototype.config = function(config) {
        if (typeof config === 'string') {
          return this._configs[config];
        }
        if (_.isObject(config)) {
          return this._configs = _.extend(this._configs || {}, config);
        }
      };

      Layout.prototype.show = function(context, callback) {
        var _this = this;
        callback = callback || context;
        if (!_.isFunction(callback)) {
          callback = null;
        }
        this.app.currentModule(this.module);
        if (!this._layoutView) {
          this._layoutView = new LayoutView({
            el: this.config("el"),
            template: this.config("template"),
            app: this.app,
            context: context
          });
        }
        if (this._layoutView.$el.data('layout-id') === this.id) {
          if (typeof callback === "function") {
            callback(this._layoutView);
          }
          return;
        }
        this._layoutView.$el.data('layout-id', this.id);
        return require(this.config("deps") || [], function() {
          return _this._layoutView.render(callback);
        });
      };

      return Layout;

    })();
    LayoutView = (function(_super) {

      __extends(LayoutView, _super);

      function LayoutView() {
        return LayoutView.__super__.constructor.apply(this, arguments);
      }

      LayoutView.prototype.render = function(action) {
        var _this = this;
        return this.options.app.template(this.template || this.options.template, this.options.context, function(text) {
          _this.$el.html(text);
          if (action) {
            return action(_this);
          }
        });
      };

      return LayoutView;

    })(Backbone.View);
    return Layout;
  });

}).call(this);
